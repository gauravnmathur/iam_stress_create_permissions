# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import iam_pb2 as iam__pb2


class IamServiceStub(object):
  """Handles retrievals and updates to permissions.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAuthorization = channel.unary_unary(
        '/autonomic.iam.IamService/getAuthorization',
        request_serializer=iam__pb2.GetAuthorizationRequest.SerializeToString,
        response_deserializer=iam__pb2.GetAuthorizationResponse.FromString,
        )
    self.getBatchAuthorization = channel.unary_stream(
        '/autonomic.iam.IamService/getBatchAuthorization',
        request_serializer=iam__pb2.GetBatchAuthorizationRequest.SerializeToString,
        response_deserializer=iam__pb2.GetBatchAuthorizationResponse.FromString,
        )
    self.createPermission = channel.unary_unary(
        '/autonomic.iam.IamService/createPermission',
        request_serializer=iam__pb2.CreatePermissionRequest.SerializeToString,
        response_deserializer=iam__pb2.CreatePermissionResponse.FromString,
        )
    self.upsertPermission = channel.unary_unary(
        '/autonomic.iam.IamService/upsertPermission',
        request_serializer=iam__pb2.UpsertPermissionRequest.SerializeToString,
        response_deserializer=iam__pb2.UpsertPermissionResponse.FromString,
        )
    self.updatePermission = channel.unary_unary(
        '/autonomic.iam.IamService/updatePermission',
        request_serializer=iam__pb2.UpdatePermissionRequest.SerializeToString,
        response_deserializer=iam__pb2.UpdatePermissionRequest.FromString,
        )
    self.deletePermission = channel.unary_unary(
        '/autonomic.iam.IamService/deletePermission',
        request_serializer=iam__pb2.DeletePermissionRequest.SerializeToString,
        response_deserializer=iam__pb2.DeletePermissionResponse.FromString,
        )
    self.searchPermissions = channel.unary_unary(
        '/autonomic.iam.IamService/searchPermissions',
        request_serializer=iam__pb2.SearchPermissionsRequest.SerializeToString,
        response_deserializer=iam__pb2.SearchPermissionsResponse.FromString,
        )
    self.createRole = channel.unary_unary(
        '/autonomic.iam.IamService/createRole',
        request_serializer=iam__pb2.CreateRoleRequest.SerializeToString,
        response_deserializer=iam__pb2.CreateRoleResponse.FromString,
        )
    self.updateRole = channel.unary_unary(
        '/autonomic.iam.IamService/updateRole',
        request_serializer=iam__pb2.UpdateRoleRequest.SerializeToString,
        response_deserializer=iam__pb2.UpdateRoleResponse.FromString,
        )
    self.deleteRole = channel.unary_unary(
        '/autonomic.iam.IamService/deleteRole',
        request_serializer=iam__pb2.DeleteRoleRequest.SerializeToString,
        response_deserializer=iam__pb2.DeleteRoleResponse.FromString,
        )
    self.searchRoles = channel.unary_unary(
        '/autonomic.iam.IamService/searchRoles',
        request_serializer=iam__pb2.SearchRolesRequest.SerializeToString,
        response_deserializer=iam__pb2.SearchRoleResponse.FromString,
        )
    self.getRole = channel.unary_unary(
        '/autonomic.iam.IamService/getRole',
        request_serializer=iam__pb2.GetRoleRequest.SerializeToString,
        response_deserializer=iam__pb2.GetRoleResponse.FromString,
        )
    self.createUser = channel.unary_unary(
        '/autonomic.iam.IamService/createUser',
        request_serializer=iam__pb2.CreateUserRequest.SerializeToString,
        response_deserializer=iam__pb2.CreateUserResponse.FromString,
        )
    self.deleteUser = channel.unary_unary(
        '/autonomic.iam.IamService/deleteUser',
        request_serializer=iam__pb2.DeleteUserRequest.SerializeToString,
        response_deserializer=iam__pb2.DeleteUserResponse.FromString,
        )


class IamServiceServicer(object):
  """Handles retrievals and updates to permissions.

  """

  def getAuthorization(self, request, context):
    """
    Permission API


    Get authorization to access an object.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getBatchAuthorization(self, request, context):
    """Get authorization to access a batch of requests.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createPermission(self, request, context):
    """Create a permission. IAM only allows valid permissions to be created.

    The following conditions must be met,
    1. A user cannot have more than one active role on an object.

    2. A role must only be established between the role's predefined subject/object type.

    3. Subject, Object, Role must always be specified.

    (3) will result in a client error. (1,2) will result in a PRECONDITION_FAILED error

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def upsertPermission(self, request, context):
    """Upsert a permission.

    If the user currently has a permission against the object with the requested role, there will
    be no change. If a permission exists and the role is different than the requested role, the
    existing permission is deleted and replaced by a new permission with the requested role.
    Finally, if there is no existing permission between the subject and object, it will be created.
    Create operations follow the same rules as described in `createPermission` comments.
    Similar to Http PUT semantics.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updatePermission(self, request, context):
    """Update a permission's end time.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deletePermission(self, request, context):
    """Given a subject and an object, remove the permission current permission between them.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def searchPermissions(self, request, context):
    """Given a query, search for permissions matching the criteria. See SearchPermissionsRequest
    messsage comments for precise usage.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createRole(self, request, context):
    """
    Role API
    This API is unstable and likely to change.


    Create a new role

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateRole(self, request, context):
    """Not implemented

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteRole(self, request, context):
    """Delete a role given the role name. Role must not be referenced from any permissions or
    a FailedPrecondition exception is thrown.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def searchRoles(self, request, context):
    """Not implemented

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getRole(self, request, context):
    """Get a Role given the role's name.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createUser(self, request, context):
    """
    User API
    This API is unstable and likely to change.


    Create an IAM user given name and email.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteUser(self, request, context):
    """Delete an IAM user with a given name. All the user's permissions will also be deleted.

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_IamServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAuthorization': grpc.unary_unary_rpc_method_handler(
          servicer.getAuthorization,
          request_deserializer=iam__pb2.GetAuthorizationRequest.FromString,
          response_serializer=iam__pb2.GetAuthorizationResponse.SerializeToString,
      ),
      'getBatchAuthorization': grpc.unary_stream_rpc_method_handler(
          servicer.getBatchAuthorization,
          request_deserializer=iam__pb2.GetBatchAuthorizationRequest.FromString,
          response_serializer=iam__pb2.GetBatchAuthorizationResponse.SerializeToString,
      ),
      'createPermission': grpc.unary_unary_rpc_method_handler(
          servicer.createPermission,
          request_deserializer=iam__pb2.CreatePermissionRequest.FromString,
          response_serializer=iam__pb2.CreatePermissionResponse.SerializeToString,
      ),
      'upsertPermission': grpc.unary_unary_rpc_method_handler(
          servicer.upsertPermission,
          request_deserializer=iam__pb2.UpsertPermissionRequest.FromString,
          response_serializer=iam__pb2.UpsertPermissionResponse.SerializeToString,
      ),
      'updatePermission': grpc.unary_unary_rpc_method_handler(
          servicer.updatePermission,
          request_deserializer=iam__pb2.UpdatePermissionRequest.FromString,
          response_serializer=iam__pb2.UpdatePermissionRequest.SerializeToString,
      ),
      'deletePermission': grpc.unary_unary_rpc_method_handler(
          servicer.deletePermission,
          request_deserializer=iam__pb2.DeletePermissionRequest.FromString,
          response_serializer=iam__pb2.DeletePermissionResponse.SerializeToString,
      ),
      'searchPermissions': grpc.unary_unary_rpc_method_handler(
          servicer.searchPermissions,
          request_deserializer=iam__pb2.SearchPermissionsRequest.FromString,
          response_serializer=iam__pb2.SearchPermissionsResponse.SerializeToString,
      ),
      'createRole': grpc.unary_unary_rpc_method_handler(
          servicer.createRole,
          request_deserializer=iam__pb2.CreateRoleRequest.FromString,
          response_serializer=iam__pb2.CreateRoleResponse.SerializeToString,
      ),
      'updateRole': grpc.unary_unary_rpc_method_handler(
          servicer.updateRole,
          request_deserializer=iam__pb2.UpdateRoleRequest.FromString,
          response_serializer=iam__pb2.UpdateRoleResponse.SerializeToString,
      ),
      'deleteRole': grpc.unary_unary_rpc_method_handler(
          servicer.deleteRole,
          request_deserializer=iam__pb2.DeleteRoleRequest.FromString,
          response_serializer=iam__pb2.DeleteRoleResponse.SerializeToString,
      ),
      'searchRoles': grpc.unary_unary_rpc_method_handler(
          servicer.searchRoles,
          request_deserializer=iam__pb2.SearchRolesRequest.FromString,
          response_serializer=iam__pb2.SearchRoleResponse.SerializeToString,
      ),
      'getRole': grpc.unary_unary_rpc_method_handler(
          servicer.getRole,
          request_deserializer=iam__pb2.GetRoleRequest.FromString,
          response_serializer=iam__pb2.GetRoleResponse.SerializeToString,
      ),
      'createUser': grpc.unary_unary_rpc_method_handler(
          servicer.createUser,
          request_deserializer=iam__pb2.CreateUserRequest.FromString,
          response_serializer=iam__pb2.CreateUserResponse.SerializeToString,
      ),
      'deleteUser': grpc.unary_unary_rpc_method_handler(
          servicer.deleteUser,
          request_deserializer=iam__pb2.DeleteUserRequest.FromString,
          response_serializer=iam__pb2.DeleteUserResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'autonomic.iam.IamService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
